/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 */

/**
 * GDX-PAY remarks:
 *
 * Downloaded from https://raw.githubusercontent.com/chrisbanes/gradle-mvn-push/master/gradle-mvn-push.gradle
 * with small modifications:
 * GROUP --> GROUPID
 * VERSIONCODE --> VERSION
 * POM_ARTIFACT_ID --> ${project.name}
 * added getRepositoryUrl(), isLocalBuild()
 */

apply plugin: 'maven-publish'
apply plugin: 'maven'
apply plugin: 'signing'

def currentDir = buildscript.sourceFile.getParentFile()
apply from: "$currentDir/publish_to_maven_repo.gradle"

ext.mavenDeploymentVersion = version

afterEvaluate { project ->
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}

def getRepositoryUrl() {
    if (isLocalBuild()) {
        return getLocalRepositoryUrl()
    }

    if (isReleaseBuild()) {
        return getReleaseRepositoryUrl()
    }

    return getSnapshotRepositoryUrl()
}

/*
publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"
            artifactId = project.name
            groupId = project.group
            version = project.version

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            // See also: http://stackoverflow.com/questions/28827593/android-library-dependencies-missing-from-pom-with-gradle
            pom.withXml {
                // for dependencies and exclusions
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each { ModuleDependency dp ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dp.group)
                    dependencyNode.appendNode('artifactId', dp.name)
                    dependencyNode.appendNode('version', dp.version)

                    // for exclusions
                    if (dp.excludeRules.size() > 0) {
                        def exclusions = dependencyNode.appendNode('exclusions')
                        dp.excludeRules.each { ExcludeRule ex ->
                            def exclusion = exclusions.appendNode('exclusion')
                            exclusion.appendNode('groupId', ex.group)
                            exclusion.appendNode('artifactId', ex.module)
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username getRepositoryUsername()
                password getRepositoryPassword()
            }
            url getRepositoryUrl()
        }
    }
}
*/
